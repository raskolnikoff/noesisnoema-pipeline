#!/usr/bin/env python3
"""
RAGpack validation CLI command.

Usage: nn-pack validate <ragpack_path>
"""

import sys
import json
import jsonschema
import zipfile
from pathlib import Path
from typing import Dict, Any, List, Tuple
import argparse


def load_schema() -> Dict[str, Any]:
    """Load the manifest v1.1 schema."""
    schema_path = Path(__file__).parent / "schemas" / "manifest_v1_1.json"
    if not schema_path.exists():
        raise FileNotFoundError(f"Schema file not found: {schema_path}")
    
    with open(schema_path, 'r') as f:
        return json.load(f)


def validate_pack_structure(pack_path: Path) -> Tuple[bool, List[str]]:
    """
    Validate basic RAGpack structure.
    
    Returns:
        Tuple of (is_valid, errors)
    """
    errors = []
    
    if pack_path.suffix == '.zip':
        # Validate zip file
        try:
            with zipfile.ZipFile(pack_path, 'r') as zf:
                files = zf.namelist()
                
                # Check required files
                required_files = ['chunks.json', 'embeddings.npy']
                for req_file in required_files:
                    if req_file not in files:
                        errors.append(f"Missing required file: {req_file}")
                
                # Check if it's v1.1 format
                has_manifest = 'manifest.json' in files
                has_citations = 'citations.jsonl' in files
                has_legacy_metadata = 'metadata.json' in files
                
                if has_manifest:
                    print("✓ Found manifest.json (v1.1 format)")
                elif has_legacy_metadata:
                    print("⚠ Found metadata.json (legacy format)")
                    errors.append("Warning: Legacy format detected. Consider upgrading to v1.1")
                else:
                    errors.append("No manifest.json or metadata.json found")
                
                if has_citations:
                    print("✓ Found citations.jsonl")
                else:
                    print("⚠ No citations.jsonl found")
                    
        except zipfile.BadZipFile:
            errors.append("Invalid zip file")
    else:
        # Validate directory
        if not pack_path.is_dir():
            errors.append(f"Path is not a directory: {pack_path}")
            return False, errors
        
        # Check required files
        required_files = ['chunks.json', 'embeddings.npy']
        for req_file in required_files:
            file_path = pack_path / req_file
            if not file_path.exists():
                errors.append(f"Missing required file: {req_file}")
        
        # Check format version
        manifest_file = pack_path / 'manifest.json'
        metadata_file = pack_path / 'metadata.json'
        citations_file = pack_path / 'citations.jsonl'
        
        if manifest_file.exists():
            print("✓ Found manifest.json (v1.1 format)")
        elif metadata_file.exists():
            print("⚠ Found metadata.json (legacy format)")
            errors.append("Warning: Legacy format detected. Consider upgrading to v1.1")
        else:
            errors.append("No manifest.json or metadata.json found")
        
        if citations_file.exists():
            print("✓ Found citations.jsonl")
        else:
            print("⚠ No citations.jsonl found")
    
    return len([e for e in errors if not e.startswith("Warning:")]) == 0, errors


def validate_manifest(manifest_data: Dict[str, Any], schema: Dict[str, Any]) -> Tuple[bool, List[str]]:
    """
    Validate manifest against schema.
    
    Returns:
        Tuple of (is_valid, errors)
    """
    errors = []
    
    try:
        jsonschema.validate(manifest_data, schema)
        print("✓ Manifest structure is valid")
        return True, errors
    except jsonschema.ValidationError as e:
        errors.append(f"Manifest validation error: {e.message}")
        return False, errors
    except jsonschema.SchemaError as e:
        errors.append(f"Schema error: {e.message}")
        return False, errors


def validate_citations_coverage(pack_path: Path) -> Tuple[bool, List[str]]:
    """
    Validate that ≥95% of chunks have citations.
    
    Returns:
        Tuple of (is_valid, errors)
    """
    errors = []
    
    try:
        # Load chunks and citations
        if pack_path.suffix == '.zip':
            with zipfile.ZipFile(pack_path, 'r') as zf:
                # Load chunks
                try:
                    with zf.open('chunks.json') as f:
                        chunks = json.load(f)
                except KeyError:
                    errors.append("chunks.json not found")
                    return False, errors
                
                # Load citations
                try:
                    with zf.open('citations.jsonl') as f:
                        content = f.read().decode('utf-8')
                        citations = []
                        for line in content.strip().split('\n'):
                            if line.strip():
                                citations.append(json.loads(line))
                except KeyError:
                    errors.append("citations.jsonl not found")
                    return False, errors
        else:
            # Load from directory
            chunks_file = pack_path / 'chunks.json'
            citations_file = pack_path / 'citations.jsonl'
            
            if not chunks_file.exists():
                errors.append("chunks.json not found")
                return False, errors
            
            if not citations_file.exists():
                errors.append("citations.jsonl not found")
                return False, errors
            
            with open(chunks_file, 'r') as f:
                chunks = json.load(f)
            
            citations = []
            with open(citations_file, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        citations.append(json.loads(line))
        
        # Calculate coverage
        num_chunks = len(chunks)
        num_citations = len(citations)
        coverage = (num_citations / num_chunks) * 100 if num_chunks > 0 else 0
        
        print(f"Citations coverage: {num_citations}/{num_chunks} chunks ({coverage:.1f}%)")
        
        if coverage >= 95.0:
            print("✓ Citations coverage meets requirement (≥95%)")
            return True, errors
        else:
            errors.append(f"Citations coverage {coverage:.1f}% is below required 95%")
            return False, errors
    
    except Exception as e:
        errors.append(f"Error validating citations: {e}")
        return False, errors


def validate_ragpack(pack_path: Path) -> bool:
    """
    Validate a RAGpack file or directory.
    
    Returns:
        True if valid, False otherwise
    """
    print(f"Validating RAGpack: {pack_path}")
    print("=" * 50)
    
    all_valid = True
    all_errors = []
    
    # Step 1: Validate basic structure
    print("\n1. Validating pack structure...")
    structure_valid, structure_errors = validate_pack_structure(pack_path)
    all_valid &= structure_valid
    all_errors.extend(structure_errors)
    
    # Step 2: Validate manifest (if v1.1)
    print("\n2. Validating manifest...")
    try:
        manifest_data = None
        if pack_path.suffix == '.zip':
            with zipfile.ZipFile(pack_path, 'r') as zf:
                try:
                    with zf.open('manifest.json') as f:
                        manifest_data = json.load(f)
                except KeyError:
                    print("⚠ No manifest.json found (legacy format)")
        else:
            manifest_file = pack_path / 'manifest.json'
            if manifest_file.exists():
                with open(manifest_file, 'r') as f:
                    manifest_data = json.load(f)
            else:
                print("⚠ No manifest.json found (legacy format)")
        
        if manifest_data:
            try:
                schema = load_schema()
                manifest_valid, manifest_errors = validate_manifest(manifest_data, schema)
                all_valid &= manifest_valid
                all_errors.extend(manifest_errors)
            except Exception as e:
                print(f"⚠ Could not validate manifest: {e}")
        
    except Exception as e:
        print(f"⚠ Error loading manifest: {e}")
    
    # Step 3: Validate citations coverage (if v1.1)
    print("\n3. Validating citations coverage...")
    citations_valid, citations_errors = validate_citations_coverage(pack_path)
    if citations_valid:
        all_valid &= citations_valid
    all_errors.extend(citations_errors)
    
    # Summary
    print("\n" + "=" * 50)
    if all_valid:
        print("✅ RAGpack validation PASSED")
        return True
    else:
        print("❌ RAGpack validation FAILED")
        print("\nErrors found:")
        for error in all_errors:
            if error.startswith("Warning:"):
                print(f"  ⚠ {error}")
            else:
                print(f"  ❌ {error}")
        return False


def main():
    """Main CLI entry point."""
    # Check if called as "nn-pack validate"
    if len(sys.argv) > 1 and sys.argv[1] == "validate":
        # Remove "validate" from args and parse the rest
        sys.argv = [sys.argv[0]] + sys.argv[2:]
        
    parser = argparse.ArgumentParser(
        description="Validate RAGpack format and completeness"
    )
    parser.add_argument(
        "ragpack",
        type=Path,
        help="Path to RAGpack file (.zip) or directory"
    )
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Verbose output"
    )
    
    args = parser.parse_args()
    
    if not args.ragpack.exists():
        print(f"Error: RAGpack path does not exist: {args.ragpack}")
        sys.exit(1)
    
    try:
        valid = validate_ragpack(args.ragpack)
        sys.exit(0 if valid else 1)
    except Exception as e:
        print(f"Validation error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()